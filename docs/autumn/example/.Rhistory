diff((0:10)^2)
diffinv(diff((0:10)^2))
### ホワイトノイズの生成
set.seed(123)
n <- 1000            # 時系列の長さ
x <- ts(rnorm(n))    # 正規分布の場合
plot(x, col="blue")  # 時系列として図示される
y <- ts(rt(n, df=4)) # 自由度4のt分布の場合
plot(y, col="red")   # 図示
?ts
x
head(x)
tsp(x)
x[1:10]
str(x)
names(x)
?ts
start(x)
end(x)
frequency(x)
### トレンドのあるホワイトノイズの生成
set.seed(123)
n <- 1000     # 時系列の長さ
mu <- 1       # トレンドの切片
alpha <- 0.01 # トレンドの傾き
x <- ts(mu + alpha*(1:n) + rnorm(n))
plot(x, col="orchid")
plot(ts(sin(mu + alpha*(1:n)) + rnorm(n))
)
plot(ts(sin(mu + alpha*(1:n)^2) + rnorm(n)),col="blue")
### ランダムウォークのシミュレーション
set.seed(123)
n <- 1000 # 時系列の長さ
x0 <- 1   # 初期値
epsilon <- rnorm(n-1)
## for文によって生成する方法
x <- ts(double(n))
x[1] <- x0
for(i in 2:n) x[i] <- x[i-1] + epsilon[i-1]
plot(x, col="brown")
## 関数diffinvを使う方法 (こちらの方が速い)
y <- ts(diffinv(epsilon, xi=x0))
sum(abs(x - y)) # xとyは全く同じ系列
## 参考．diffは階差(差分)，diffinvはその逆関数(和分)
(0:10)^2
diff((0:10)^2)
diffinv(diff((0:10)^2))
### AR(2)モデルのシミュレーション
set.seed(123)
n <- 1000            # 時系列の長さ
a <- c(0.669, 0.263) # ARの係数
epsilon <- rnorm(n-2)
x0 <- rnorm(2)       # 初期値
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- a%*%x[i-1:2] + epsilon[i-2]
plot(x, col="orange")
## 関数filterを使う方法 (こちらの方が速い)
y <- ts(c(x0, filter(epsilon, filter=a, method="r", init=rev(x0))))
sum(abs(x - y)) # ほぼ0 (数値計算上の問題からちょうど0とはならない)
## 参考．関数filterは時系列に対する線形フィルタ
## methodで"c"(convolution)を選ぶとmoving average
## "r"(recursive)を選ぶとautoregressionの変換になる
## それぞれの変換を行うときの係数をfilterで指定する
a <- c(-2,1) # a_1, a_2
x.init <- c(0,1) # x_2, x_1 (時間順に注意)
ep <- c(5,6,7)
(x <- filter(ep, filter=a, method="r", init=x.init))
## filterの出力結果の確認
a[1]*x.init[1]+a[2]*x.init[2]+ep[1] # x_3
a[1]*x[1]+a[2]*x.init[1]+ep[2]      # x_4
a[1]*x[2]+a[2]*x[1]+ep[3]           # x_5
### MA(2)モデルのシミュレーション
set.seed(123)
n <- 1000            # 時系列の長さ
b <- c(0.438, 0.078) # MAの係数
epsilon <- rnorm(n)
x0 <- epsilon[1:2]   # 初期値は(epsilon1, epsilon2)
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- b %*% epsilon[i - 1:2] + epsilon[i]
plot(x, col="seagreen")
## 関数filterを使う方法 (sides=1は moving averageを過去の方向にのみ行う)
y <- ts(filter(epsilon, filter=c(1,b), method="c", sides=1))
y[1:2] <- x0 # 初期値の書き換え (計算できないのでNAになっている)
sum(abs(x - y)) # ほぼ0 (数値計算上の問題からちょうど0とはならない)
### ARMA(2,1)モデルのシミュレーション
set.seed(123)
n <- 1000          # 時系列の長さ
a <- c(0.8, -0.64) # ARの係数
b <- -0.5          # MAの係数
epsilon <- rnorm(n)
x0 <- rnorm(2)     # 初期値
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- a%*%x[i-1:2] + b*epsilon[i-1] + epsilon[i]
plot(x, col="navyblue")
## arima.simで生成する方法 (初期値の指定はできない)
## 関数arima.simのノイズの既定値は標準正規列
y <- arima.sim(list(ar=a, ma=b), n)
lines(y, col = "deeppink")
### 人工データによるacfの実行例
set.seed(123)
n <- 1000 # 時系列の長さ
## ホワイトノイズ
wn <- ts(rnorm(n))
acf(wn)
## ランダムウォーク
rw <- diffinv(rnorm(n-1)) # 初期値0．diffinvは階差をとる関数diffの逆関数．
acf(rw)
acf(rw,lag.max=100)
## AR(2)モデル
a <- c(0.669, 0.263) # ARの係数
x <- arima.sim(list(ar=a), n)
acf(x)
a2 <- c(0.8, -0.64) # 別のARの係数
x2 <- arima.sim(list(ar=a2), n)
acf(x2)
## MA(2)モデル
b <- c(0.438, 0.078) # MAの係数
y <- arima.sim(list(ma=b), n)
acf(y)
b2 <- c(-0.6, 0.3)   # 別のMAの係数
y2 <- arima.sim(list(ma=b2), n)
acf(y2)
## ARMA(2,2)モデル
z <- arima.sim(list(ar=a, ma=b), n)
acf(z)
z2 <- arima.sim(list(ar=a2, ma=b2), n) # 別の係数
acf(z2)
### datasets::EuStockMarkets による例
## ヨーロッパ各国の株価指数の日次時系列データを集めたデータ
y <- ts(EuStockMarkets[,3]) # France CACを分析する
plot(y) # 時系列の図示
acf(y)  # 自己相関
## 指数的に増えているようなので対数をとってみる
ly <- log(y)
plot(ly) # 対数時系列
acf(ly)  # 自己相関
## 階差をとってみる
x <- diff(ly)
plot(x) # 階差時系列
acf(x)  # 自己相関
## ラグ1以上の自己相関はほぼない
## ランダムウォーク的な動きの時系列データであると予想される
acf(x,plot=FALSE)$acf[,,1] # 自己相関の計算値の出力
### ホワイトノイズの生成
set.seed(123)
n <- 1000            # 時系列の長さ
x <- ts(rnorm(n))    # 正規分布の場合
head(x)
x
plot(x, col="blue")  # 時系列として図示される
y <- ts(rt(n, df=4)) # 自由度4のt分布の場合
plot(y, col="red")   # 図示
lines(x, col="blue")
?ts
z <- rnorm(n)
dat <- ts(z,start=c(1995,1),frequency=12)
plot(dat,col="brown")
dat <- ts(z,start=c(1995,1),frequency=260)
plot(dat,col="brown")
start(dat)
end(dat)
frequency(dat)
tsp(dat)
?ts
time(dat)
### トレンドのあるホワイトノイズの生成
set.seed(123)
n <- 1000     # 時系列の長さ
mu <- 1       # トレンドの切片
alpha <- 0.01 # トレンドの傾き
x <- ts(mu + alpha*(1:n) + rnorm(n))
plot(x, col="orchid")
foo <- ts(mu + alpha*(1:n) + 5*sin(pi*(1:n)/200) + rnorm(n))
plot(foo,col="orchid")
bar <- ts(mu + alpha*(1:n) - 5*((1:n)/1000)^2 + rnorm(n))
plot(bar,col="seablue")
plot(bar,col="seagreen")
### ランダムウォークのシミュレーション
set.seed(123)
n <- 1000 # 時系列の長さ
x0 <- 1   # 初期値
epsilon <- rnorm(n-1)
## for文によって生成する方法
x <- ts(double(n))
head(x)
x[1] <- x0
for(i in 2:n) x[i] <- x[i-1] + epsilon[i-1]
plot(x, col="brown")
## 参考．diffは階差(差分)，diffinvはその逆関数(和分)
(0:10)^2
## 参考．diffは階差(差分)，diffinvはその逆関数(和分)
(0:10)^2
diff((0:10)^2)
diffinv(diff((0:10)^2))
## 関数diffinvを使う方法 (こちらの方が速い)
y <- ts(diffinv(epsilon, xi=x0))
sum(abs(x - y)) # xとyは全く同じ系列
plot(ts(diffinv(rt(n-1,df=4),xi=x0)),col="darkgreen")
plot(ts(diffinv(rt(n-1,df=1),xi=x0)),col="darkgreen")
### AR(2)モデルのシミュレーション
set.seed(123)
n <- 1000            # 時系列の長さ
a <- c(0.669, 0.263) # ARの係数
epsilon <- rnorm(n-2)
x0 <- rnorm(2)       # 初期値
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- a%*%x[i-1:2] + epsilon[i-2]
plot(x, col="orange")
## 関数filterを使う方法 (こちらの方が速い)
y <- ts(c(x0, filter(epsilon, filter=a, method="r", init=rev(x0))))
sum(abs(x - y)) # ほぼ0 (数値計算上の問題からちょうど0とはならない)
dim(a)
length(a)
### MA(2)モデルのシミュレーション
set.seed(123)
n <- 1000            # 時系列の長さ
b <- c(0.438, 0.078) # MAの係数
epsilon <- rnorm(n)
x0 <- epsilon[1:2]   # 初期値は(epsilon1, epsilon2)
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- b %*% epsilon[i - 1:2] + epsilon[i]
plot(x, col="seagreen")
?filter
plot(x, col="seagreen")
## 関数filterを使う方法 (sides=1は moving averageを過去の方向にのみ行う)
y <- ts(filter(epsilon, filter=c(1,b), method="c", sides=1))
y[1:2] <- x0 # 初期値の書き換え (計算できないのでNAになっている)
sum(abs(x - y)) # ほぼ0 (数値計算上の問題からちょうど0とはならない)
b <- c(0.6,-0.5,0.4,-0.2)
z <- ts(filter(epsilon, filter=c(1,b), method="c", sides=1))
plot(z)
z[1:4]
### ARMA(2,1)モデルのシミュレーション
set.seed(123)
n <- 1000          # 時系列の長さ
a <- c(0.8, -0.64) # ARの係数
b <- -0.5          # MAの係数
epsilon <- rnorm(n)
x0 <- rnorm(2)     # 初期値
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- a%*%x[i-1:2] + b*epsilon[i-1] + epsilon[i]
plot(x, col="navyblue")
?arma.sim
?arima.sim
## for文で生成する方法
x <- ts(double(n))
x[1:2] <- x0
for(i in 3:n) x[i] <- a%*%x[i-1:2] + b*epsilon[i-1] + epsilon[i]
plot(x, col="navyblue")
## arima.simで生成する方法 (初期値の指定はできない)
## 関数arima.simのノイズの既定値は標準正規列
y <- arima.sim(list(ar=a, ma=b), n)
lines(y, col = "deeppink")
### 人工データによるacfの実行例
set.seed(123)
n <- 1000 # 時系列の長さ
## ホワイトノイズ
wn <- ts(rnorm(n))
acf(wn)
## ランダムウォーク
rw <- diffinv(rnorm(n-1)) # 初期値0．diffinvは階差をとる関数diffの逆関数．
acf(rw)
## AR(2)モデル
a <- c(0.669, 0.263) # ARの係数
x <- arima.sim(list(ar=a), n)
acf(x)
a2 <- c(0.8, -0.64) # 別のARの係数
x2 <- arima.sim(list(ar=a2), n)
acf(x2)
## MA(2)モデル
b <- c(0.438, 0.078) # MAの係数
y <- arima.sim(list(ma=b), n)
acf(y)
b2 <- c(-0.6, 0.3)   # 別のMAの係数
y2 <- arima.sim(list(ma=b2), n)
acf(y2)
## ARMA(2,2)モデル
z <- arima.sim(list(ar=a, ma=b), n)
acf(z)
z2 <- arima.sim(list(ar=a2, ma=b2), n) # 別の係数
acf(z2)
?acf
### datasets::EuStockMarkets による例
## ヨーロッパ各国の株価指数の日次時系列データを集めたデータ
y <- ts(EuStockMarkets[,3]) # France CACを分析する
plot(y) # 時系列の図示
?EuStockMarkets
acf(y)  # 自己相関
## 指数的に増えているようなので対数をとってみる
ly <- log(y)
plot(ly) # 対数時系列
acf(ly)  # 自己相関
## 階差をとってみる
x <- diff(ly)
plot(x) # 階差時系列
acf(x)  # 自己相関
## ラグ1以上の自己相関はほぼない
## ランダムウォーク的な動きの時系列データであると予想される
acf(x,plot=FALSE)$acf[,,1] # 自己相関の計算値の出力
### 関数arによる自己回帰モデルの推定
## 実行例１: 人工データ(前出のモデル)
set.seed(123)
n <- 1000            # 時系列の長さ
a <- c(0.669, 0.263) # ARの係数
x <- arima.sim(list(ar=a), n)
p.max <- 10 # あてはめの候補とするARモデルの最大次数
ar(x, aic=TRUE, order.max=p.max, method="yule-walker")
acf(x)
pacf(x)
## 実行例２：Monthly Lake Erie Levels 1921 – 1970
## Hyndman, R.J. “Time Series Data Library” (https:://datamarket.com)
mydata <- ts(read.csv(file="monthly-lake-erie-levels-1921-1970.csv",row.names=1),
start=c(1921,1),frequency=12)
colnames(mydata) <- "level"
plot(mydata, col="royalblue",main="Monthly Lake Erie Levels")
acf(mydata,na.action=na.pass)
pacf(mydata,na.action=na.pass)
## 12月のデータのみ集める
x <- window(mydata,start=c(1921,12),end=c(1970,12),frequency=1)
plot(x, col="navy")
acf(x)
pacf(x)
acf(x)
## ARモデルをあてはめ
(arfit <- ar(x, aic=TRUE, order.max=10, method="yule-walker"))
## acf(resid(arfit),na.action=na.pass) # 残差はホワイトノイズ的であてはまりは良さそう
(ar(x, aic=TRUE, order.max=10, method="burg")) # 推定法を変えると結果が少し異なる
pacf(x)
### 関数arによる自己回帰モデルの推定
## 実行例１: 人工データ(前出のモデル)
set.seed(123)
n <- 1000            # 時系列の長さ
a <- c(0.669, 0.263) # ARの係数
x <- arima.sim(list(ar=a), n)
plot(x)
p.max <- 10 # あてはめの候補とするARモデルの最大次数
ar(x, aic=TRUE, order.max=p.max, method="yule-walker")
acf(x)
pacf(x)
## 実行例２：Monthly Lake Erie Levels 1921 – 1970
## Hyndman, R.J. “Time Series Data Library” (https:://datamarket.com)
mydata <- ts(read.csv(file="monthly-lake-erie-levels-1921-1970.csv",row.names=1),
start=c(1921,1),frequency=12)
colnames(mydata) <- "level"
plot(mydata, col="royalblue",main="Monthly Lake Erie Levels")
acf(mydata,na.action=na.pass)
tsp(mydata)
tsp(mydata)
## 12月のデータのみ集める
x <- window(mydata,start=c(1921,12),end=c(1970,12),frequency=1)
tsp(x)
time(x)
plot(x, col="navy")
acf(x)
pacf(x)
## ARモデルをあてはめ
(arfit <- ar(x, aic=TRUE, order.max=10, method="yule-walker"))
## acf(resid(arfit),na.action=na.pass) # 残差はホワイトノイズ的であてはまりは良さそう
(ar(x, aic=TRUE, order.max=10, method="burg")) # 推定法を変えると結果が少し異なる
### 関数arimaによる自己回帰移動平均モデルの推定
## 実行例１: 人工データ(前出のモデル)
set.seed(123)
n <- 1000          # 時系列の長さ
a <- c(0.8, -0.64) # ARの係数
b <- -0.5          # MAの係数
y <- arima.sim(list(ar=a, ma=b), n)
plot(y)
acf(y)
pacf(y)
(mod1 <- arima(y, order=c(2, 0, 1))) # ARMA(2,1)モデルのあてはめ
head(resid(mod1))
plot(resid(mod1))
acf(resid(mod1))
(mod2 <- arima(y, order=c(0, 0, 2))) # MA(2)モデルのあてはめ
plot(resid(mod2))
acf(resid(mod2)) # あてはまりは良くない
## AIC最小化によって次数選択をする方法 (forecast::auto.arima)
## install.packages("forecast")
require(forecast) # パッケージの読み込み
(mod3 <- auto.arima(y, d=0, D=0))
## dは原系列の差分を何回とるか決めるパラメーター
## Dは原系列の周期性(季節性)を取り除くためにとる差分の回数
## ARMA(3,1)モデルが選ばれる
acf(resid(mod3)) # あてはまりは悪くない
## 実行例２：気候データ
## データの読み込み
require(zoo) # ts と同様だが機能の高い zoo クラスを利用
mydata <- read.csv("tokyo_weather.csv", fileEncoding="utf8")
x <- zoo(mydata$気温, seq(from=as.Date("2017-01-01"),
to=as.Date("2017-12-31"), by=1))
plot(x,col="red",xlab="month",ylab="degree",
main="Temperature in Tokyo (2017)")
plot(window(x,start=as.Date("2017-04-01"),end=as.Date("2017-05-31")),
col="red",xlab="date",ylab="degree",
main="Temperature in Tokyo (2017 April-May)")
acf(x)       # 減衰が遅いので差分をとった方が良さそう
acf(diff(x)) # 定常に見える
pacf(diff(x)) # 定常に見える
## 差分系列にARMAモデルをあてはめる(ARMA(1,2)が選ばれる)
(armafit <- auto.arima(x, d=1, D=0))
acf(resid(armafit)) # そこそこあてはまりは良さそう
acf(x)       # 減衰が遅いので差分をとった方が良さそう
plot(diff(x)) # 定常に見える
acf(diff(x)) # 定常に見える
plot(diff(x)) # 定常に見える
## 差分系列にARMAモデルをあてはめる(ARMA(1,2)が選ばれる)
(armafit <- auto.arima(x, d=1, D=0))
acf(resid(armafit)) # そこそこあてはまりは良さそう
### SARIMAモデルによる datasets::AirPassengers の予測
require(tseries)
require(forecast)
install.packages("tseries")
### SARIMAモデルによる datasets::AirPassengers の予測
require(tseries)
require(forecast)
### SARIMAモデルによる datasets::AirPassengers の予測
require(tseries)
require(forecast)
## AirPassengersデータの読み込み
data(AirPassengers)
tsp(AirPassengers) # データの時間に関する情報を表示 (月ごとのデータ)
plot(AirPassengers,col="blue") # データの表示
plot(log(AirPassengers),col="blue") # 対数変換データの表示
## 以下では対数変換したデータを扱う
x.train <- window(log(AirPassengers),end=c(1957,12))  # 訓練データ
x.test  <- window(log(AirPassengers),start=c(1958,1)) # 試験データ
## まずトレンド(明らかな上昇傾向)について考察
## 階差を取ることにより定常化できるか検討
plot(diff(x.train),col="blue")
acf(diff(x.train))  # 自己相関
pacf(diff(x.train)) # 偏自己相関
## 季節成分について考察
## 12ヶ月で階差を取って同様に検討
plot(diff(diff(x.train),lag=12),col="blue")
acf(diff(diff(x.train),lag=12))  # 自己相関
pacf(diff(diff(x.train),lag=12)) # 偏自己相関
## いくつかのモデルで推定を試みる
(est<-arima(x.train,order=c(0,1,1),seasonal=list(order=c(0,1,0))))
tsdiag(est) # 時系列モデルの診断図
(est<-arima(x.train,order=c(0,1,2),seasonal=list(order=c(0,1,0))))
tsdiag(est) # 時系列モデルの診断図
(est<-arima(x.train,order=c(0,1,3),seasonal=list(order=c(0,1,0))))
tsdiag(est) # 時系列モデルの診断図
(est<-arima(x.train,order=c(0,1,1),seasonal=list(order=c(0,1,1))))
tsdiag(est) # 時系列モデルの診断図
## 自動的にモデル選択を行う
sarimafit <- auto.arima(x.train,d=1,D=1)
tsdiag(sarimafit) # 時系列モデルの診断図
sarimafit
## 予測値と標準偏差の計算
sarimaprd <- predict(sarimafit,n.ahead=length(x.test))
pr <- sarimaprd$pred # 予測値
se <- sarimaprd$se   # 予測誤差の標準偏差
## 対数データにおける予測+/-標準偏差の表示
seqplot.ts(x.train,x.test,colx="blue",coly="darkgreen",
ylab="passengers/month (log)")
lines(pr,col="red")
lines(pr+se,col="orange");lines(pr-se,col="orange")
## もとのデータの空間に戻してみる
seqplot.ts(exp(x.train),exp(x.test),colx="blue",coly="darkgreen",
ylab="passengers/month")
lines(exp(pr),col="red")
lines(exp(pr+se),col="orange");lines(exp(pr-se),col="orange")
5+6
1+2
3+4
5+6
1+2
3+4
5+6
1+2
3+4
5+6
1+2
3+4
5+6
source('~/.active-rstudio-document', echo=TRUE)
1+2
3+4
5+6
1+2
1+2
3+4
5+6
?sleep
subset(sleep,group==1)
subset(sleep,group==1,"extra")
subset(sleep,subset=group==1,select="extra")
plot(subset(sleep,subset=group==1,select="extra"),
subset(sleep,subset=group==2,select="extra"),
pch="*",xlab="group 1",ylab="group 2",main="sleep")
plot(subset(sleep,subset=group==1,select="extra"),
subset(sleep,subset=group==2,select="extra"),)
plot(x=subset(sleep,subset=group==1,select="extra"),
y=subset(sleep,subset=group==2,select="extra"),)
?plot
subset(sleep,subset=group==1,select="extra")
subset(sleep,subset=group==2,select="extra")
plot(x=subset(sleep,subset=group==1,select="extra",drop=T),
y=subset(sleep,subset=group==2,select="extra",drop=T))
