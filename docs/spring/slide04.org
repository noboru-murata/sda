#+TITLE: データのプロット
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@eb.waseda.ac.jp
#+DATE: 2020.05.08
:reveal:
#+INCLUDE: "./myconf.org"
#+STARTUP: hidestars content
# C-c C-x C-v でinlineを切り替え
# <l C-i でlatex block
# C-c '
#+OPTIONS: date:t H:4 num:nil toc:nil \n:nil
#+OPTIONS: @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t 
#+OPTIONS: skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+PROPERTY: header-args:R :session *R* 
#+PROPERTY: header-args+:R :cache yes 
#+PROPERTY: header-args+:R :results output
#+PROPERTY: header-args+:R :exports both 
#+PROPERTY: header-args+:R :tangle no
#+PROPERTY: header-args:latex :exports results
#+PROPERTY: header-args+:latex :results raw

#+begin_src R :exports none
  setwd("~/Desktop/lectures/u-tokyo/spring/slide")
#+end_src
#+begin_src R :exports none :tangle yes
  ### 第4回 演習問題解答例
#+end_src
:end:

* データのプロット
** 可視化の重要性
   - データの特徴や傾向を把握するために効果的
   - Rはきわめて多彩な作図機能を持つ
   - *~package::graphics~* に含まれる代表的な描画関数を取り上げて解説する
     - 描画関連の関数は色，
       線の種類や太さ，
       あるいは図中の文字の大きさなどを指定することができる
     - 用意されている多彩なオプションは説明しきれないため，
       必要に応じて関数 *~help()~* (ヘルプ)と
       と関数 *~example()~* (例題)
       を参照のこと

** 図の保存
   - RStudioの機能を使う場合:
     1. 右下ペインの"Plots"タブの"Export"をクリック
     2. 形式やサイズを指定する \\
	/(クリップボードにコピーもできる)/
   - コンソール/Rscriptで実行する場合:
     - ~help(pdf)~ : PDFファイルに保存
     - ~help(png)~ : PNGファイルに保存
     - ~help(dev.copy)~ : "graphic device" 間でコピー
     などを参照

* 基本的な描画
** ベクトルの描画: 関数 ~plot()~
   ベクトルデータの描画を行う
   - 基本書式 
     #+begin_src R :eval no
       plot(x, y=NULL, type="p", xlim=NULL, ylim=NULL,
	    main=NULL, xlab=NULL, ylab=NULL, ...)
     #+end_src
   - 関数の引数
     - ~x~, ~y~ : ベクトル． ~y~ は省略可能．
     - ~type~: 描画タイプ．既定値は ~p~ (点)．
       ~l~ (折れ線)など指定可
     - ~xlim~: $x$ 軸の範囲．既定値は自動的に決定
     - ~ylim~: $y$ 軸の範囲．既定値は自動的に決定
     - ~main~: 図のタイトル．既定値は空白
     - ~xlab~: $x$ 軸のラベル名．既定値は ~Index~
     - ~ylab~: $y$ 軸のラベル名．既定値は ~x~ のオブジェクト名
       # - ~...~: 他のオプション．詳細は ~help(par)~ を参照

** 関数 ~plot()~ のオプション
   - よく利用されるその他のオプション (~...~ の部分)
     - ~col~: 色の指定．
       ~"red"~ や ~"blue"~ など． \\
       /(指定可能な色は関数 ~colors()~ で照会できる)/
     - ~pch~: 点の形．
       詳細は ~help(points)~ を参照
     - ~lty~: 線のタイプ．
       実線・破線など．タイプ名もしくは数字で指定．
       詳細は ~help(par)~ を参照
     - ~lwd~: 線の太さ．数字で指定
     - ~cex~: 文字の大きさ．
       既定値の何倍にするかを指定
     # - ベクトル ~x~ に対して ~plot(x)~ を実行すれば, 
     #   横軸に成分番号, 縦軸に各成分を描画した点プロットが作成される

** ベクトルの描画の例 (1/3)
    #+begin_src R :file figs/graph-plot1_1.png :results graphics :tangle yes
      ## plot(x) の場合 
      x <- pi/4*(0:8) # 45度(pi/4)おきに1周期分 (0-2*pi)
      plot(sin(x)) # x軸はベクトルの要素番号，y軸はsin(x)の値
    #+end_src

    #+NAME:   fig:graph-plot1_1
    #+ATTR_HTML: :height 100%
    [[file:figs/graph-plot1_1.png]]

** ベクトルの描画の例 (2/3)
    #+begin_src R :file figs/graph-plot1_2.png :results graphics :tangle yes
      ## plot(x,y) の場合
      x <- pi/4*(0:8)
      plot(x, sin(x)) # x の値に対する y=sin(x) の値をプロット
    #+end_src

    #+NAME:   fig:graph-plot1_2
    #+ATTR_HTML: :height 100%
    [[file:figs/graph-plot1_2.png]]

** ベクトルの描画の例 (3/3)
    #+begin_src R :file figs/graph-plot1_3.png :results graphics :tangle yes
      ## オプションを追加
      x <- pi/4*(0:8)
      plot(x,sin(x),type="l",lwd=3,col="blue",ylab="y=sin(x)") 
    #+end_src

    #+NAME:   fig:graph-plot1_3
    #+ATTR_HTML: :height 100%
    [[file:figs/graph-plot1_3.png]]

** 重ね描き
   - 別のベクトルを点として重ね描きする場合
     #+begin_src R :eval no
       curve(f, add=TRUE, ...)
     #+end_src
   - 別のベクトルを線として重ね描きする場合
     #+begin_src R :eval no
       curve(f, add=TRUE, ...)
     #+end_src
   - 関数の引数
     - ~expr~: 1変数関数 (関数名)
     - ~from~: $x$ 軸の左端

** 重ね描きの例
    #+begin_src R :file figs/graph-plot2_1.png :results graphics :tangle yes
      ## オプションを追加
      x <- pi/4*(0:8)
      plot(x,sin(x),type="l",lwd=3,col="blue",ylab="y=sin(x)") 
    #+end_src

    #+NAME:   fig:graph-plot2_1
    #+ATTR_HTML: :height 100%
    [[file:figs/graph-plot2_1.png]]

** 関数の描画: 関数 ~curve()~ 
   1変数関数の描画を行う
   - 基本書式
     #+begin_src R :eval no
       curve(expr, from=NULL, to=NULL, add=FALSE,
	     type="l", xname="x", xlab=xname, ylab=NULL, ...)
     #+end_src
   - 関数の引数
     - ~expr~: 1変数関数 (関数名)
     - ~from~: $x$ 軸の左端
     - ~to~: $x$ 軸の右端
     - ~add~: 重ね描きするかどうか
     - ~xname~: $x$ 軸の変数名
#     - ~...~: "ベクトルの描画"と同じオプションが利用可能
#       plot(x, y=0, to=1, ...)

** 描画の重ね描き
   - 別の関数 ~f~ を重ね描きする場合
     #+begin_src R :eval no
       curve(f, add=TRUE, ...)
     #+end_src

** 例: ~graph-plot.r~
    #+begin_src R :file figs/graph-plot2.png :width 600 :height 600 :exports both :results graphics
      ### 関数の描画
      plot(sin, 0, 4*pi, 
	   col="blue", # グラフの線の色
	   lwd=2, # グラフの線の太さ
	   ylab="sin/cos" # y軸のラベル
      )
      curve(cos, 
	    add=TRUE, # グラフを上書き
	    col="red", lwd=2)
      x <- seq(0, 4*pi, by=0.1)
      y <- sin(x) + rep_len(c(-0.2, 0.1), length(x))
      points(x, y, col="green", pch="*") # 点を追加. pchは点の形を指定
    #+end_src
** 
    # #+CAPTION: ベクトルの描画
    #+NAME:   fig:graph-plot2
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-plot2.png]] 

** 例: ~graph-plot.r~
    #+begin_src R :file figs/graph-plot3.png :width 600 :height 600 :exports both :results graphics
      ### データ点の描画
      plot(x, y, type="p", pch="x", ylim=c(-2,2)) # ylimで値域を指定
      curve(sin, add=TRUE, col="orange", lwd=2)
      lines(x, y, col="blue") # 折れ線を追加
    #+end_src
** 
    # #+CAPTION: ベクトルの描画
    #+NAME:   fig:graph-plot3
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-plot3.png]]
    

