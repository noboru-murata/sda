* 文字情報の表示
** グラフ内の文字 ~text()~
** 凡例の表示
*** 関数 ~legend()~
    グラフに凡例を追加する
    - 基本書式
      #+begin_src R :exports code
	legend(x, y=NULL, legend, ...)
      #+end_src
      - ~x,y~: 凡例の位置を指定 (座標やキーワードで指定が可能)
      - ~legend~: 凡例の文字列ベクトル
    - 次の実行例で見るように数式を扱うこともできる．
    - 詳細は ~help(plotmath)~ を参照

*** 例: ~graph-legend.r~
    #+begin_src R :file figs/graph-legend.png :width 600 :height 600 :exports both :results graphics
      ### 凡例の追加
      f <- function(x) exp(-x) * cos(x)
      plot(f, 0, 2*pi, col="red", lwd=2, ylab="")
      g <- function(x) exp(-x) * sin(x)
      curve(g, lty=2, # グラフの線の形式 2は破線
	    add=TRUE, col="blue", lwd=2)
      legend(4, # 凡例の左上のx座標
	     1, # 凡例の左上のy座標
	     legend=c(expression(e^{-x}*cos(x)),expression(e^{-x}*sin(x))),
	     lty=c(1,2), lwd=2, col=c("red","blue"), # パラメータはグラフに準拠
	     bty="n", # 凡例の枠線の形式(オプション) "n"は枠線なし
	     y.intersp=2) # 行間の指定(オプション)
    #+end_src
*** 
    # #+CAPTION: 凡例の追加
    #+NAME:   fig:graph-legend
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-legend.png]]

** 日本語に関する注意
   日本語を含む図で文字化けが起こった場合 \\ 
   (主にMacOS)
   - 関数 ~par~ の ~family~ オプションでフォントを指定 \\
     ヒラギノ角ゴシックW4を指定する場合
     #+begin_src R :exports code
       par(family="HiraginoSans-W4")      
     #+end_src
     (数字を変えると太さが変わる)
   - 以下のサイトなども参考になる \\
     https://oku.edu.mie-u.ac.jp/~okumura/stat/font.html

*** ~graph-font.r~
    #+begin_src R :file figs/graph-font.png :width 600 :height 600 :exports both :results graphics
      ### 日本語フォントの指定
      par(family = "HiraginoSans-W4") 
      ### 2018年の東京の気候データによる例
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      ## 月ごとの平均をプロットする
      (x <- aggregate(mydat[ ,-c(1,2)], by=list(月 = mydat$月), FUN=mean))
      plot(x$気温, type ="b", lwd=3, col="green", ylim=c(0, max(x$気温)),
	   xlab="月", ylab="", main="2018年気候データ", axes=FALSE) # 軸は後で
      axis(1, 1:12, 1:12);axis(2) # x,y軸の作成
      lines(x$降水量, type="h", lwd=3, col="blue")
      lines(x$日射量, lwd=3, lty=2, col="red")
      abline(0, 0, lwd=2, lty="dotted") #  y=0の線を引く
      legend(1, 25, legend=c("気温","降水量","日射量"),
	     col=c("green","blue","red"), lwd=3, lty=c(1,1,2))
    #+end_src
*** 
    # #+CAPTION: 日本語フォントの指定
    #+NAME:   fig:graph-font
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-font.png]]

** プロット環境の設定
*** 関数 ~par()~
    プロット環境の設定(複数図の配置, 余白の設定)をする
    - 基本書式
      #+begin_src R :exports code
	par(tag=value)
      #+end_src
      - ~tag~: グラフィックスパラメータ
    - プロットの際の線の種類や色, 点の形等の既定値を設定することができる
    - 設定可能なグラフィックスパラメータは ~help(par)~ を参照
    # *** 注意
    #     プロット環境は非常に細かく設定でき，
    #     またそれぞれの描画関数独自のパラメータも存在するため，
    #     ここでは紹介しきれない\\
    #     必要に応じてヘルプやインターネット上の情報を参照すること

* 演習
** 練習問題
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 前回配布した県別のデータ ~jpdata~ を用いて婚姻・離婚率の散布図を描画せよ．
     - jpdata1.csv: 県別の対象データ
     - jpdata2.csv: 対象データの内容
     - jpdata3.csv: 県別と地域の対応関係
     - 読み込み方は以下を参照．
       #+begin_src R :exports code 
	 jpdat <- read.csv(file="jpdata1.csv",fileEncoding="utf8",row.names=1)
	 jpval <- read.csv(file="jpdata2.csv",fileEncoding="utf8")
	 jpreg <- read.csv(file="jpdata3.csv",fileEncoding="utf8")
       #+end_src
   - 地方別に異なる点の形状を用いた散布図を描け．
   - それ以外にも様々な散布図を描画してみよう．

   # ~sleep~ データ
   # (睡眠薬投与による睡眠時間の増減のデータ・詳細はhelp(sleep)参照)
   # において，
   # ~group~ が1のデータの ~extra~ を $x$ 軸，
   # ~group~ が2のデータの ~extra~ を $y$ 軸とした
   # 散布図を描画せよ．
   # ただし，点の色は青，点の形は $\times$ とし，
   # タイトルを"Sleep data"，
   # $x$ 軸のラベルを"group 1"，
   # $y$ 軸のラベルを"group 2"
   # とせよ．$x$ 軸, $y$ 軸のデータはそれぞれ
   # #+begin_src R :exports code
   #    x <- subset(sleep,group==1,extra,drop=TRUE) 
   #    y <- subset(sleep,group==2,extra,drop=TRUE)
   # #+end_src
   # としてつくるとよい．

** 練習問題
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 前の演習で作成した散布図に凡例や日本語のタイトルを加えてみよ．
   # airquality~ について，
   # Month，Day以外の変数の月ごとの平均の棒グラフを作成せよ

* 分布の視覚化
** 散布図
   - 2種類のデータ $x_1,\dots,x_N$
     および $y_1,\dots,y_N$ が与えられたとき，
     同じ index を持つ点 $(x_1,y_1),\dotsc,(x_N,y_N)$ を
     平面上に描画した図

*** 関数 ~plot()~
    散布図を作成する
    - 基本書式
      #+begin_src R :exports code
	plot(x, y=NULL, ...)
      #+end_src
      - ~x~: 1種類目のデータ $x_1,\dots,x_N$
      - ~y~: 2種類目のデータ $y_1,\dots,y_N$
      - ~...~: "ベクトルの描画"と同じオプションが利用可能

*** 関数 ~plot()~
    データフレーム ~x~ の変数A，Bの散布図を作成する
    - 基本書式
      #+begin_src R :exports code
       plot(B ~ A, data=x, ...)
      #+end_src
      - ~x~: データフレーム
      - ~A,B~: 変数名 (データフレームの列名)
    - データフレーム ~x~ に対して
      ~plot(x)~ を実行すると，
      すべての変数のペアに対する散布図が
      作成される(散布図行列; ~pairs()~ 後述)

*** 例: ~graph-plot.r~
    #+begin_src R :file figs/graph-plot4.png :width 600 :height 600 :exports both :results graphics
      ### データフレームを用いた散布図 (airqualityを利用)
      plot(Ozone ~ Wind, data=airquality,
	   pch="*", col="red", cex=2) # cexは点の大きさの倍率を指定
    #+end_src
    # #+CAPTION: ベクトルの描画
    #+NAME:   fig:graph-plot4
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-plot4.png]]
** ヒストグラム
   - データの値の範囲をいくつかの区間に分割し，
     各区間に含まれるデータの個数を棒グラフにしたもの
   - 棒グラフの横幅が区間に対応し, 面積が区間に含まれるデータの個数に比例するグラフを作成する
   - データの分布の仕方(どのあたりに値が集中しているか, どの程度値にばらつきがあるかなど)を可視化するのに有効

*** 関数 ~hist()~ 
    - 基本書式
      #+begin_src R :exports code
	hist(x, breaks, freq)      
      #+end_src
      - ~x~: ベクトル
      - ~breaks~: 区間の分割の仕方を指定．
	数字を指定するとデータ範囲をその数字に近い個数に等分割する．
	既定値はSturgesの公式．      
	詳細はヘルプを参照
	# % (データ数$n$に対し$\lceil\log_2n+1\rceil$)で計算
	# % \footnote{$\lceil x\rceil$は$x$以下の最大の整数を表す}．
      - ~freq~: ~TRUE~ を指定すると縦軸はデータ数，
	~FALSE~ を指定すると縦軸はデータ数/全データ数．
	~TRUE~
	# % だが\texttt{breaks}の指定によっても変わる
      - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

*** 例: ~graph-hist.r~
    #+begin_src R :file figs/graph-hist1.png :width 600 :height 600 :exports both :results graphics
      ### 関数histによるヒストグラムの作図
      mydat <- read.csv("example/tokyo_weather.csv", 
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      ### 基本的なヒストグラム
      # hist(mydat$気温)
      ### ビンの数を指定する場合
      hist(mydat$気温, 
	   xlab="", ylab="頻度",
	   breaks=25, # ビンの数を約25に設定
	   labels=TRUE, # 各ビンの度数を表示
	   col="green", main="2018年気温ヒストグラム") 
    #+end_src
*** 
    # #+CAPTION: ヒストグラム
    #+NAME:   fig:graph-hist1
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-hist1.png]]

*** 例: ~graph-hist.r~
    #+begin_src R :file figs/graph-hist2.png :width 600 :height 600 :exports both :results graphics
      ### 関数histによるヒストグラムの作図
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      ### 密度での表示
      hist(mydat$風速, freq=FALSE, # 全体に対する割合で表示
	   xlab="", ylab="密度", breaks=25, 
	   col="lightblue", border="cyan", # 長方形の境界の色
	   main="2018年風速ヒストグラム") 
    #+end_src
*** 
    # #+CAPTION: ヒストグラム
    #+NAME:   fig:graph-hist2
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-hist2.png]]

** 箱ひげ図
   - データの中心，散らばり具合および外れ値を考察するための図 
     (ヒストグラムの簡易版)
   - 複数のデータの分布の比較の際に有効
     - 太線で表示された中央値(第2四分位点)
     - 第1四分位点を下端・第3四分位点を上端とする長方形(箱)
     - 第1四分位点・第3四分位点からそれぞれ箱の長さの1.5倍以内にあるデータのうちの
       最小の値・最大の値を下端・上端とする直線(ひげ)
   - ひげの外側のデータは点で表示される

*** 関数 ~boxplot()~
    箱ひげ図を描画する
    - 基本書式
      #+begin_src R :exports code
	boxplot(x, ...)      
      #+end_src
      - ~x~: ベクトルまたはデータフレーム
	- ベクトルに対しては単一の箱ひげ図
	- データフレーム対しては列ごとの箱ひげ図
      - ~...~: 関数 ~plot()~ と同様のオプションを指定可能
    - データフレーム ~x~ の
      変数 ~B~ を変数 ~A~ (質的変数; 性別・植物の種類など)で分類する場合
      #+begin_src R :exports code
       boxplot(B ~ A, data=x, ...)
      #+end_src

*** 例: ~graph-boxplot.r~
    #+begin_src R :file figs/graph-boxplot1.png :width 600 :height 600 :exports both :results graphics
      ### 関数boxplotによる箱ひげ図の作図
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      ### 基本的な箱ひげ図
      boxplot(mydat[ ,-c(1,2)]) # 月日は除く
    #+end_src
*** 
    # #+CAPTION: 箱ひげ図
    #+NAME:   fig:graph-boxplot1
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-boxplot1.png]]

*** 例: ~graph-boxplot.r~
    #+begin_src R :file figs/graph-boxplot2.png :width 600 :height 600 :exports both :results graphics
      ### 関数boxplotによる箱ひげ図の作図
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      ### 月ごとに気温を分類
      boxplot(気温 ~ 月, data=mydat, col="orange", main="月ごとの気温")
      ### 図を回転
      ## boxplot(気温 ~ 月, data=mydat,
      ## 	col="purple", main="月ごとの気温", horizontal=TRUE)
    #+end_src
*** 
    # #+CAPTION: 箱ひげ図
    #+NAME:   fig:graph-boxplot2
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-boxplot2.png]]


# ** 演習
#    :PROPERTIES:
#    :reveal_background: #fef4f4
#    :END:
#    実行例 ~graph-hist.r~ で紹介した
#    Weylの一様分布定理において，
#    無理数 ~a~ を別の値に変更しても
#    ~x~ の分布の仕方は
#     区間 $(0,1)$ 上でほぼ均一となることを確かめよ．\\
#     (どの程度均一に近くなるかは ~a~ によって異なるため, いくつか確かめてみよ)


* 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - ~jpdata~ を用いてヒストグラムや箱ひげ図を作成せよ．
     (タイトル・色などは適当に調節せよ)
     - 各変数のヒストグラム
     - 地方ごとの各変数の箱ひげ図
     など


* 比率の視覚化
** 棒グラフ
** 関数 ~barplot()~
    棒グラフを作成する
   - 基本書式
     #+begin_src R :exports code
       barplot(x,width=1,space=NULL,beside=FALSE,
	       legend.text=NULL,args.legend=NULL, ...)
     #+end_src
     - ~x~: ベクトルまたは行列 (データフレームは不可)
     - ~width~: 棒の幅
     - ~space~: 棒グラフ間・変数間のスペース
     - ~legend.text~: 凡例
     - ~beside~: 複数の変数を縦に並べるか・横に並べるか
     - ~args.legend~: 関数 ~legend~ に渡す引数
     - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

** 例: ~graph-barplot.r~
    #+begin_src R :file figs/graph-barplot1.png :width 600 :height 600 :exports both :results graphics
      ### 関数barplotによる棒グラフの作図
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      ## 月ごとに各変数の平均を計算
      x <- aggregate(mydat[ ,-c(1,2)], by=list(月 = mydat$月), FUN=mean)
      ### 基本的な棒グラフ
      barplot(x[,2], # 棒の高さのベクトル
	      col="slateblue", # 棒の色の指定
	      names.arg=x[,1], # x軸のラベル
	      main=names(x)[2]) # タイトル
    #+end_src
** 
    # #+CAPTION: 棒グラフ
    #+NAME:   fig:graph-barplot1
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-barplot1.png]]

** 例: ~graph-barplot.r~
    #+begin_src R :file figs/graph-barplot2.png :width 600 :height 600 :exports both :results graphics
      ### 関数barplotによる棒グラフの作図
      ### 複数の棒グラフ
      par(family = "HiraginoSans-W4") 
      barplot(as.matrix(x[ ,-1]), # 第1引数はベクトルまたは行列
	      col=rainbow(12)[c(8:1,12:9)], # 12色に色分け
	      beside=TRUE, # 棒グラフを横に並べる
	      space=c(1.5, 3), # 棒グラフ間・変数間のスペースを指定
	      legend.text=paste0(x[ ,1], "月"), # 凡例の指定
	      args.legend=list(ncol = 2)) # 凡例を2列にして表示
    #+end_src
** 
    # #+CAPTION: 棒グラフ
    #+NAME:   fig:graph-barplot2
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-barplot2.png]]

** 円グラフ
** 関数 ~pie()~ 
    円グラフを作成する
    - 基本書式
      #+begin_src R :exports code
	pie(x, clockwise=FALSE, ...)
      #+end_src
      - ~x~: ベクトル
      - ~clockwise~: 時計回りに書くか否か
      - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

** 例: ~graph-pie.r~
    #+begin_src R :file figs/graph-pie.png :width 600 :height 600 :exports both :results graphics
      ### 関数pieによる円グラフの作図
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      z <- hist(mydat$日射量, breaks=5, plot=FALSE) # 5つ程度に分類
      x <- z$count
      y <- z$breaks
      names(x) <- paste(y[-length(y)], y[-1], sep="-")
      ### 基本的な円グラフ
      ## pie(x, col=gray(seq(0,1,length=length(x))))
      ### 向きと色を調整
      pie(x, clockwise=TRUE, col=heat.colors(length(x),rev=TRUE), 
	  main="2018年日射量")
    #+end_src
** 
    # #+CAPTION: 円グラフ
    #+NAME:   fig:graph-pie
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-pie.png]]

* 多次元データの視覚化
** 散布図行列
** 関数 ~pairs()~
    散布図行列を作成する
    - 基本書式
      #+begin_src R :exports code
	pairs(x, ...)
	plot(x,...)
      #+end_src
      (すべての列のペアに対する散布図を行列状に並べる)
      - ~x~: データフレーム 
    - 変数 ~A1~, $\dots$, ~Ak~ (列名)のみ考える場合
      #+begin_src R :exports code
	pairs(~ A1 + ... + Ak, data=x, ...)
	plot(~ A1 + ... + Ak, data=x, ...)
      #+end_src

** 例: ~graph-pairs.r~
    #+begin_src R :file figs/graph-pairs.png :width 600 :height 600 :exports both :results graphics
      ### 関数pairsによる散布図の作図
      mydat <- read.csv("example/tokyo_weather.csv",
			fileEncoding="utf8")
      par(family = "HiraginoSans-W4") 
      ### 基本的な散布図
      ## pairs(mydat[,-c(1,2)], col="blue")
      ## plot(mydat[,-c(1,2)], col="blue")でも同じ図が描ける
      ### 表示する項目を指定
      pairs(~ 気温 + 日射量 + 風速, data=mydat,
	    col=rainbow(12)[mydat$月]) # 月毎に異なる色で表示
    #+end_src
** 
    # #+CAPTION: 散布図行列
    #+NAME:   fig:graph-pairs
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-pairs.png]]

** 3次元のグラフ
*** 関数 ~persp()~ 
    3次元のグラフを2次元に射影した俯瞰図を描く
    - 基本書式
      #+begin_src R :exports code
	persp(x, y, z, theta=0, phi=15, expand=1)      
      #+end_src
      - ~x,y,z~: $x,y,z$ 座標\\
	(~z~ は
	点(~x[i],y[j]~)に対応する値を
	$(i,j)$ 成分とする行列で与える必要がある)
      - ~theta,phi~: 俯瞰の方向を指定する極座標
      - ~expand~: $z$ 軸の拡大度
      - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

*** 例: ~graph-plot3d.r~
    #+begin_src R :file figs/graph-plot3d1.png :width 600 :height 600 :exports both :results graphics
      ### 関数perspによる2変数関数の俯瞰図
      f <- function(x,y) x^2 - y^2
      x <- seq(-3, 3, length=51) # x座標の定義域の分割
      y <- seq(-3, 3, length=51) # y座標の定義域の分割
      z <- outer(x, y, f) # z座標の計算
      ### 基本的な俯瞰図
      ## persp(x, y, z, col="lightblue")
      ### 俯瞰する向きを指定
      persp(x, y, z, theta=30, phi=30, expand=0.5, col="royalblue",
	    main = expression(z==x^2-y^2))
    #+end_src
*** 
    # #+CAPTION: 俯瞰図
    #+NAME:   fig:graph-plot3d1
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-plot3d1.png]]

*** 多様な3次元のグラフのためのパッケージがある．
    以下は ~scatterplot3d()~ の例
    - 基本書式
      #+begin_src R :exports code
	scatterplot3d(x, color, angle=40)      
      #+end_src
      - ~x~: $x,y,z$ 座標を指定するデータフレーム\\
	(関数 ~persp()~ のように直接指定することも可能)
      - ~color~: 色を指定(~col~ ではない). 既定値は黒
      - ~angle~: $x$ 軸と $y$ 軸の間の角度
      - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

*** 例: ~graph-plot3d.r~
    #+begin_src R :file figs/graph-plot3d2.png :width 600 :height 600 :exports both :results graphics
	    ### 3次元散布図(パッケージscatterplot3dを利用)
	    ## install.packages("scatterplot3d") # 初めて使う時に必要
	    require(scatterplot3d) # パッケージのロード
	    mydat <- read.csv("example/tokyo_weather.csv", 
			      fileEncoding="utf8")
	    par(family = "HiraginoSans-W4") 
	    dat <- subset(mydat, select=c(風速, 日射量, 気温))
	    scatterplot3d(dat, pch=4, color="orchid")
    #+end_src
*** 
    # #+CAPTION: 3次元散布図
    #+NAME:   fig:graph-plot3d2
    #+ATTR_HTML: :width 50% :height 50%
    [[file:figs/graph-plot3d2.png]]


* 演習
** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - ~jpdata~ を用いて棒グラフや円グラフを作成せよ．
     (タイトル・色などは適当に調節せよ)
     - 県別の男女の勤務時間を並べた棒グラフ
     - 地方ごとの人口の比率の円グラフ
     など
** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - ~jpdata~ を用いて3次元の散布図を作成せよ．

