#+TITLE: Rの基本的な操作
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@eb.waseda.ac.jp
#+DATE: 2019.04.05
:preamble:
#+INCLUDE: "./myconf.org"
#+STARTUP: hidestars content
# C-c C-x C-v でinlineを切り替え
# <l C-i でlatex block
# C-c '
#+OPTIONS: LaTeX:t    
#+PROPERTY: results output
#+PROPERTY: exports both
:end:

* R言語の概要
** R言語とは
   - 統計計算のための言語と環境の総称
   - オープンソース・フリーソフトウェア
   - 「パッケージ」を利用して容易に機能拡張が可能
     - パッケージの開発は非常に活発 (現在10000を越える)
     - 最新の技術や方法が簡単に導入できることも多い
   - https://www.r-project.org/ (開発プロジェクトのサイト)

** RStudioとは
   - RStudio社により開発・公開されている統合開発環境(IDE)
     - R によるデータ解析や統計計算・パッケージ開発を支援
     - OSに依存しない対話型操作環境を提供
     本講義ではRStudioを用いて説明を行う
   - https://www.rstudio.com/ (RStudio社のサイト)

** Rの得意分野
   - データの分類・集計・整理
   - 記述統計量 (基本・要約統計量) の計算
   - グラフによる視覚化
   - プログラムによる処理の自動化
   - 擬似乱数による不確定性を含む現象の模擬 \\
     (確率的シミュレーション・モンテカルロ法)

** データの形式
   - 構造化データ
     - 個々のデータが項目ごとに表形式で整理されている
     - 集計・分類・抽出・追加など整理が比較的容易
     - [[color:green][例: 国別の経済指標，学生の成績表]]

   - 非構造化データ (本講義では扱わない)
     - データごとに形式や項目数など属性が異なる
     - データの整理や比較がそのままでは困難
     - [[color:green][例: 文書，画像，動画，音声]]

* R/Rstudio のインストール
** Rのインストール手順
   1. /R: The R project for Statistical Computing/
      にアクセス
      - http://www.r-project.org/ を直接入力
      - または [[color:green]["r install"]] などで検索
   2. /download R/
      というリンクをクリック
   3. CRANのミラーサイトを選ぶ:
      - どれでも利用可だが "Japan" のいずれかを選ぶと良い
      - OSごとにインストール方法が異なるので注意

** Windowsの場合
   1. /Download R for Windows/
      をクリック
   2. /base/
      をクリック
   3. /Download R (バージョン名) for Windows/
      をクリック
   4. ダウンロードされたインストーラを起動
   5. 指示に従って R をインストールする 

** Macの場合
   1. /Download R for (Mac) OS X/
      をクリック
   2. /R-(バージョン名).pkg/
      をクリック
   3. ダウンロードされたインストーラを起動
   4. 指示に従って R をインストールする 

** RStudioのインストール手順
  1. /Download RStudio - RStudio/
     にアクセス
     - https://www.rstudio.com/products/rstudio/download/ 
     - [[color:green]["rstudio install"]] などで検索
  2. /Installers for Supported Platforms/
     から自分の環境(OS)を選択
  3. ダウンロードしたインストーラを起動
  4. 指示に従って RStudio をインストールする

* 起動と終了
** 起動画面
   - /以下 RStudio を用いて説明する/
   - 起動すると4つのペイン(枠)を持つウィンドウが立ち上がる
     - 左上: エディタ
     - 左下: コンソール
     - 右上: 作業環境内の変数・コマンド履歴
     - 右下: パッケージ・グラフィックス・ヘルプ
   - (ペインの配置や数は個別に設定することもできる)

** エディタ (左上のペイン)
   - コマンドを記述したファイルを扱うためのウィンドウ
   - コンソール上に入力したコマンドは直ちに実行されてしまう
   - 複雑なコマンドを書いたり，後から修正するための機能
     - コマンドを実行順に記述したファイルを作成 
       /(R Script)/
     - ファイルを保存
     - ファイルを実行
   - (後で詳しく説明)

** コンソール (左下のペイン)
  - プログラムを実行するコマンドを入力するためのウィンドウ
  - 例えば，コンソール上で終了を指示する以下のコマンドを入力すれば
    R を終了させることができる
    #+begin_src R :exports code
    q()
    #+end_src
  - 終了できない場合はOSの機能で強制終了する 

** 終了時の注意
   - R終了前に以下のメッセージが表示される場合がある
     #+begin_src R :exports code
     q()
     #+end_src
     #+begin_src
     Save workspace image? [y/n/c]:     
     #+end_src
   - 作業で使われた変数などをセーブするか尋ねている
     - y を入力: セーブする (yesの略)
     - n を入力: セーブしない (noの略)
     - c を入力: Rの終了をキャンセルする (cancelの略)
   - セーブした場合次回起動時に読み込まれる 

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   RStudioを起動し上記の方法で終了してみよう

* 基本的な使い方
** 式の入力
   - 四則演算や一般的な関数は直感に沿った文法で計算可能
     - + (加算)，- (減算)，* (乗算)，/ (除算)，＾または** (ベキ乗)
     - sin, cos, tan (三角関数)，exp (指数関数)，log (対数関数)
   - [[color:green][コンソール上での計算]]
     #+begin_src R :exports both :results output
     1*2+3^2 
     sin(pi/4) + log(10)
     #+end_src

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   以下の式を R を用いて計算してみよう
   - $123\times456-789$
   - $(2^{2^5}+1)\div641$
   - $\sin^2(\pi/3)+\cos^2(\pi/3)$
   - 適当な数学関数を試す

** エディタからの実行
   - 新規ファイルの作成 (以下のいずれか)
     - 左上の *+* から
       *R Script* を選択
     - *File* から
       *New File* を選択，
       更に *R Script* を選択
   - エディタ上でコマンドを記述
   - 実行範囲の選択
     - 一行のみ: カーソルをその行に移動
     - 複数行: クリックしてながら移動して選択する
   - 選択範囲の実行 (以下のいずれか)
     - 左上の *Run* をクリック
     - *Code* から 
       *Selected Line(s)* を選択
       (Ctrl/Command+Enter)

   # 補足
   # - 新規ファイルの作成 (以下のいずれか)
   #   -新規ファイル - "Ctrl+Shift+N" (ショートカットキー)
   # - エコーあり: (以下のいずれか)
   #   - エディタ右上部の "Source" の右側の▼をクリックして "Source with Echo" を選択
   #   - "Ctrl+Shift+Enter" または "Command+Shift+Enter"
   #   実行したコードの内容が出力("エコー"という)される
   # - エコーなしの実行: (以下のいずれか)
   #   - エディタ右上部にある "Source" をクリック
   #   - "Ctrl+Shift+S" または "Command+Shift+S"
   #   コードの実行のみが行われ，実行されたコードは出力されない

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   先程の演習の内容をエディタから実行してみよう
   - $123\times456-789$
   - $(2^{2^5}+1)\div641$
   - $\sin^2(\pi/3)+\cos^2(\pi/3)$
   - 適当な数学関数を試す

** ファイルの保存
   - ファイルの保存 (以下のいずれか)
     - 左上のディスクのマークをクリック
     - *File* から 
       *Save* を選択 (Ctrl/Command+S)
   - ファイル作成に関する注意
     - 保存する時にファイル名の入力が求められる
     - 拡張子は通常
       *.R* または
       *.r* を利用する
     - *#* 以降の字列は実行されない 
       /(コメントを残す際に有用)/

# ** ファイルの実行
#    - {{{example(コンソールからの実行)}}}
#      #+begin_src R :exports code
#      source("ファイル名")
#      source("ファイル名",echo=TRUE) # エコーあり
#      #+end_src
#      - "ファイルのある場所(ディレクトリ)"も含めて指定する
#      - ファイル名のみだと作業ディレクトリにあるとみなされる
#    - {{{example(作業ディレクトリの確認)}}}
#      #+begin_src R :exports code
#      getwd()
#      #+end_src
#      コンソール上部にも記載されている

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   作業ディレクトリを作成しファイルに保存してみよう
   - $123\times456-789$
   - $(2^{2^5}+1)\div641$
   - $\sin^2(\pi/3)+\cos^2(\pi/3)$
   - 適当な数学関数を試す

** 関数の実行
   - 関数の取り扱いは一般的な計算機言語とほぼ同様
   - 関数は引数とその値を指定して実行
   - ただし引数名は順序を守れば省略可能
   - [[color:green][関数の呼び出し方]]
     #+begin_src R :exports code
     f(arg1=value1, arg2=value2) 
     # arg1, arg2 は引数の名前，value1, value2 は引数に渡す値を表す
     f(value1, value2) # 上と同値
     #+end_src

   # - 引数が存在しない，
   #  もしくはすべての引数に対し既定値が設定されている関数もある．
   #  例えば ~f~ がそのような関数だった場合，
   #  コンソール上で
   #  #+begin_src R :exports code
   #  f()    
   #  #+end_src
   #  を実行すると引数=既定値として関数の内容が実行される
   # - 典型例はRを終了する関数 ~q()~

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   以下の例を確認してみよう
   - [[color:green][正弦関数の計算]]
     #+begin_src R :exports both :results none
     sin(x = pi/2)
     sin(pi/2) # 上と同値
     #+end_src
   - [[color:green][対数関数の計算]] (xやbに適当な数値を代入せよ)
     #+begin_src R :exports both :results none
     log(x, b) # 底をbとする対数
     log(x=x, base=b) #上と同値
     log(base=b, x=x) #上と同値
     log(b,x) # = log(x=b,base=x) 
     log(x) # 自然対数 =log(x,base=exp(1))
     #+end_src
    
** ヘルプ機能
   - 各関数の詳細(機能，引数名，引数の既定値，実行例など)を記述した
     ヘルプファイルが用意されている
   - ヘルプファイルに関連する関数:
     - ~help()~ (使い方や例の表示)
     - ~example()~ (例を実際に実行してくれる)
     - ~help.search()~ (キーワード検索)
   - 右下ペインの *[[color:blue][Help]]* タブ右上の検索バーでも参照可能
   - [[color:green][ヘルプの使い方]] (ヘルプは右下のペインに表示される)
     #+begin_src R :exports both :results none
     help(log) # 関数logのヘルプ
     ?log # 上と同値
     example(log) # ヘルプ内の例を実行
     help.search("log") # "log"に関連する項目は？
     ??"log" # 上と同値
     #+end_src

   # - 関数の正確な名前が分からない場合，
   #   キーワードを渡すことで関連するトピックをもつ関数を検索できる
   # - {{{example(例)}}} 
   #   三角関数を計算する関数の名前がわからない場合, 
   #   三角関数は英語でtrigonometric functionであることから
   #   #+begin_src R :exports both :results none
   #   help.search(trigonometric)
   #   #+end_src
   #   または
   #   #+begin_src R :exports both :results none
   #   ??trigonometric
   #   #+end_src
   #   を実行してみればよい
  
** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   以下の項目についてヘルプを利用してみよう
   - 三角関数(trigonometric function)を計算するための関数について
     ヘルプファイルを調べよ
   - 双曲線関数(hyperbolic function)についても調べよ
       
** オブジェクト
   - Rで扱うことのできる数値
     - 実数および複素数 (指数表記にも対応)
     - 無限大や不定な数など特殊なものにも対応
   - 文字列を変数名として数値等を保持することができる
   - 変数，関数，計算結果などを総称して /オブジェクト/ と呼ぶ
   - オブジェクトの情報は右上
     *[[color:blue][Environment]]* タブで確認できる
   - [[color:green][代入操作]]
     #+begin_src R :exports both :results output
     (foo <- 3) # 数値を変数 foo に代入
     bar <- sin(2/3*pi) + cos(foo * pi/4) # 計算結果を代入
     print(bar) # 変数の内容を表示
     #+end_src

   # - 変数名は自由に決めて用いることが出来る
   #   - 例: \texttt{x}, \texttt{y}, \texttt{abc}など
   # - \texttt{sin}, \texttt{log}, \texttt{pi}など
   #   Rの仕様として使われているものは，
   #   用いることができないわけではないが混乱を招く元なので使わないほうがよい
   # - 以下の文字はRの起動時からすでに特定の機能を与えられているので，
   #   値を代入する際は注意が必要
   #   #+begin_quote
   #   c q t C D F I T 
   #   #+end_quote
   #   それぞれの機能はヘルプを参照
   # - 右上のペインの使い方
   #   - これまでの作業で生成した変数に関する情報は，
   #   *{{{structure(Environment)}}}* タブで確認できる
   #   - これまでの作業でコンソール上で打ち込んだコマンドは，
   #   *{{{structure(History)}}}* タブで確認できる
   # - コンソール上で上下キーを打つことで，
   #   以前に実行したコマンドを再表示できる

** パッケージの操作
   - 機能を拡張するために多数のパッケージが用意されている  
   - パッケージのインストール方法
     - RStudioの機能を利用する方法
     - コンソールから行う方法
   - RStudioの機能を利用したインストール手順
     - 右下ペインの *Package* タブをクリック
     - 左上の *Install* をクリック
     - パッケージ名を入力し *Install* をクリック
   - パッケージの情報は右下 *Package* タブで確認できる

   # - パッケージ名の左側のボックスをチェックするとロードされ，パッケージに含まれる関数などが利用可能になる
   # - 左上部の"Update"をクリックするとインストール済みパッケージを最新版に更新できる
   # - コンソールからのインストール手順
   #   1. コンソール上で\texttt{install.packages("パッケージ名")}を実行
   #   2. パッケージをダウンロードするためのサイト(CRANのミラーサイト)の
   # 	選択を要求された場合は，適切なものを選択 (Japanのミラーサイトがよい)
   # - コンソール上でのパッケージのロード
   #   #+begin_src R :exports code
   #   library(パッケージ名)
   #   require(パッケージ名) # 上のほぼ同値
   #   #+end_src
   #   ~require()~ を用いると1度読み込んだものは再読み込みしない？

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   *swir* パッケージを導入して
   関数 ~swirl()~ を実行してみよう

