#+TITLE: データの整理と集計
#+AUTHOR: 村田 昇
# #+EMAIL: noboru.murata@eb.waseda.ac.jp
# #+DATE: 2019.04.19
:preamble:
#+INCLUDE: "./myconf.org"
#+STARTUP: hidestars content
# C-c C-x C-v でinlineを切り替え
# <l C-i でlatex block
# C-c '
#+OPTIONS: LaTeX:t    
#+PROPERTY: results output
#+PROPERTY: exports both
:end:

* データフレームの基本操作
**  Rに用意されているデータ構造 (再掲)
   下記は代表的なもので，これ以外にもある
   - ベクトル (vector)
   - 行列 (matrix)
   - リスト (list) 
   - *データフレーム (data frame)*
   - 配列 (array)

** データフレームからの項目の抽出
   - 添字の番号を指定
   - 要素の名前で指定
   - *除外*: マイナス記号(-)をつけて指定
   - 論理値で指定
     - ~TRUE~: 要素の選択
     - ~FALSE~: 要素の *除外*

*** 例: ~data-select.r~
    #+begin_src R :exports both :results output
      ### 条件に合致する行の選択
      which(airquality$Ozone>100 & airquality$Wind<=5) # 複数の条件の AND
      which(with(airquality, Ozone>100 & Wind<=5))     # 上と同じ (お薦めの短い書き方)
      # airquality$Ozone>100 & airquality$Wind<=5 # (NAはNAとなることに注意)

      ### 行の抽出
      airquality[which(with(airquality, Ozone>100 & Wind<=5)), ] 
      ### 列の抽出
      airquality[which(with(airquality, Ozone>100 & Wind<=5)), c("Month","Day")] 
    #+end_src

*** 関数 ~subset()~
   複合的な条件を指定してデータを整理する
   - 基本書式
     #+begin_src R :exports code
       subset(x,subset,select,drop=FALSE)
     #+end_src
   - 関数の引数
     - ~x~:  データフレーム 
     - ~subset~: 行に関する条件
     - ~select~: 列に関する条件(未指定の場合は全ての列)
     - ~drop~: 結果が1行または1列の場合ベクトルとする(TRUE)かデータフレームとする(FALSE)か

*** 例: ~data-subset.r~
    #+begin_src R :exports both :results output
      ### Ozoneが120を超える行で特定の列(WindとDay)のデータ
      subset(airquality, Ozone>120, select=c(Wind,Day)) # 
      ### Ozoneに欠測(NA)がなく, かつ(AND)Dayが5か10でWindからDayまでの列のデータ
      subset(airquality, !is.na(Ozone) & Day %in% c(5,10),select=Wind:Day)
      ### Ozoneが120以上か，またはWindが3以下(OR)でTemp以外の列を抽出
      subset(airquality, Ozone>120 | Wind <= 3, select = -Temp)
    #+end_src

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - ~datasets::airquality~ に対して
     以下の条件を満たすデータを取り出しなさい．
     - 7月のオゾン濃度 (~Ozone~)
     - 風速 (~Wind~) が時速10マイル以上で，
       かつ気温 (~Temp~) が華氏80度以上の日のデータ
     - 日射量 (~Solar.R~) が欠測 (~NA~) でないデータの
       月 (~Month~) と日 (~Day~)

* データファイルの取り扱い
** データファイルの読み書き
   - 実際の解析においては以下の操作が必要
     - 収集されたデータを読み込む
     - 整理したデータを保存する
   - Rで利用可能なデータファイル
     - CSV形式(comma separated values): テキストファイル
     - RData形式: Rの内部表現を用いたバイナリーファイル
   - データフレームを対象としたファイルの扱いをまとめる

** 作業ディレクトリ
   - Rは特定のフォルダ(*作業ディレクトリ*)で実行される
   - ファイルは作業ディレクトリに存在するものとして扱われる\\
     それ以外のファイルを扱う場合はパスを含めて指定する
   - 作業ディレクトリの確認の仕方
     - コンソールの上部の表示
     - 関数 ~getwd()~ 
   - 作業ディレクトリの変更の仕方
     - "Session">"Set Working Directory">"Choose Directory..."
     - 関数 ~setwd()~
*** 例: ~data-wd.r~
    #+begin_src R :exports code :results output
      ### 作業ディレクトリの確認 (環境によって実行結果が異なる)
      getwd()
      ### 作業ディレクトリの移動 (環境によって指定の仕方も異なる)
      setwd("~/Documents") # ホームディレクトリ下の「書類」フォルダに移動
    #+end_src

** CSV形式の操作
*** 関数 ~write.csv()~
   データフレームをCSVファイルへ書き出す
   - 基本書式
     #+begin_src R :exports code
       write.csv(x, file="")
     #+end_src
   - 関数の引数
     - ~x~: 書き出すデータフレーム
     - ~file~: 書き出すファイルの名前\\
       (作業ディレクトリ下，またはパスを指定)
   - 他にも細かいオプションがあるのでヘルプを参照のこと
*** 関数 ~read.csv()~
   CSVファイルからデータフレームを読み込む
   - 基本書式
     #+begin_src R :exports code
       read.csv(file, header=TRUE, row.names)      
     #+end_src
   - 関数の引数
     - ~file~: 読み込むファイルの名前\\
       (作業ディレクトリ下，またはパスを指定)
     - ~header~: 1行目を列名として使うか否か
     - ~row.names~: 行名の指定\\
       (行名を含む列番号/列名，または行名の直接指定が可能)
   - 他にも細かいオプションがあるのでヘルプを参照のこと
   - 関数 ~read.table()~ , ~scan()~ なども参照

*** 例: ~data-write/read.csv.r~
    #+begin_src R :exports both :results output
      ### 関数write.csvの使い方
      (mydata <- subset(airquality, Ozone>120, select=-Temp)) # データフレームの作成
      dim(mydata) # 大きさを確認
      write.csv(mydata,file="mydata.csv") # csvファイルとして書き出し

      ### 関数read.csvの使い方
      (newdata <- read.csv(file="mydata.csv",row.names=1)) # csvファイルの読み込み
      dim(newdata) # 大きさを確認
    #+end_src

** RData形式の操作
*** 関数 ~save()~
   RDataファイルへ書き出す
   - 基本書式
     #+begin_src R :exports code
       save(..., file)
     #+end_src
   - 関数の引数
     - ~...~: 保存するオブジェクト名\\
       (複数可，データフレーム以外も可)
     - ~file~: 書き出すファイルの名前\\
       (作業ディレクトリ下，またはパスを指定)
   - CSV形式と異なり，
     複数のデータフレームを1つのファイルに保存することができる

*** 関数 ~load()~ 
   RDataファイルから読み込む
   - 基本書式
     #+begin_src R :exports code
       load(file)
     #+end_src
   - 関数の引数
     - ~file~: 読み込むファイルの名前\\
       (作業ディレクトリ下，またはパスを指定)

*** 例: ~data-save/load.r~
    #+begin_src R :exports both :results output
      ### 関数saveの使い方
      (mydat1 <- subset(airquality, Temp>95, select=-Ozone)) # データフレームの作成
      (mydat2 <- subset(airquality, Temp<57, select=-Ozone)) # データフレームの作成
      dim(mydat1); dim(mydat2) # 大きさを確認
      save(mydat1,mydat2,file="mydata.rdata") # RData形式で書き出し

      ### 関数loadの使い方
      (mydat1 <- subset(airquality, Ozone > 160)) # データフレームの作成
      load(file="mydata.rdata") # RData形式の読み込み
      mydat1; mydat2 # saveしたときの名前で読み込まれ上書きされる
    #+end_src

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   - 以下のデータを読み込み，データの操作を行ってみよう．
     - データファイル
       - jpdata1-sjis/utf8.csv: 県別の対象データ
       - jpdata2-sjis/utf8.csv: 対象データの内容
       - jpdata3-sjis/utf8.csv: 県別と地域の対応関係
     - https://www.e-stat.go.jp より取得\\
       (地域から探す / 全県を選択 / 項目を選択してダウンロード)
       #+begin_src R :exports code :session mydat
	mydat <- read.csv(file="jpdata1-utf8.csv",fileEncoding="utf8",row.names=1)
	myval <- read.csv(file="jpdata2-utf8.csv",fileEncoding="utf8")
	myreg <- read.csv(file="jpdata3-utf8.csv",fileEncoding="utf8")
       #+end_src

* データの集計
** データの集約
   データを集約するための基本的な関数は用意されている
   - 関数 ~sum()~: 総和
   - 関数 ~mean()~: 平均
   - 関数 ~max()~: 最大値
   - 関数 ~min()~: 最小値
   - これ以外にもベクトルの集約を行なう関数は沢山ある

*** 例: ~data-summary.r~
    #+begin_src R :exports both :results output :session mydat
      mydat <- read.csv(file="jpdata1-utf8.csv",fileEncoding="utf8",row.names=1)
      # 一度読み込んでいれば上の行は不要
      sum(mydat$人口) # 全国の総人口 (列名で選択)
      mean(mydat[,4]) # 面積の平均値 (行列として列を選択)
      median(mydat[[4]]) # 面積の中央値 (リストとして列を選択)
      min(mydat['若年'])  # 若年人口の最小値 (列名で選択)
      with(mydat,max(老人))  # 老年人口の最大値 (関数withを利用)
    #+end_src
*** 関数 ~apply()~
   列(あるいは行)ごとの計算を行う
   - 基本書式
     #+begin_src R :exports code
       apply(X, MARGIN, FUN)
     #+end_src
   - 関数の引数
     - ~X~: データフレーム
     - ~MARGIN~: 行(1)か列(2)かを指定
     - ~FUN~: 計算すべき統計量の関数
   - 行・列の総和や平均を計算する専用の関数が用意されている\\
     (rowSums/colSums, rowMeans/colMeans)

*** 例: ~data-apply.r~
    #+begin_src R :exports both :results output :session mydat
      x <- subset(mydat, select=婚姻:勤女)
      colMeans(x) # 各列の平均
      apply(x, 2, max) # 列ごとの最大値
      sapply(x, max)   # 上と同じ
      apply(x, 2, min) # 列ごとの最小値
      ## 自作関数の適用
      apply(x, 2, function(x){sum(x>mean(x))}) # 列ごとに平均より大きいデータ数を計算
    #+end_src
*** 関数 ~aggregate()~
    各行をいくつかのグループにまとめて統計量を計算する
   - 基本書式
     #+begin_src R :exports code
       aggregate(x, by, FUN)
     #+end_src
   - 関数の引数
     - ~x~: データフレーム
     - ~by~: 各行が属するグループを指定するベクトルをリストで与える(複数可)
     - ~FUN~: 求めたい統計量を計算するための関数
   - ~x~ がベクトルの場合には関数 ~tapply()~ も利用可能

*** 例: ~data-aggregate.r~
    #+begin_src R :exports both :results output :session mydat
      ## 地方ごとの人口と面積の平均値を求める
      x <- subset(mydat,select=人口:面積)
      aggregate(x, by=list(地方=myreg$地方), FUN=mean) 
    #+end_src

*** 例: ~data-aggregate.r~
    #+begin_src R :exports both :results output :session mydat
      ## 以下のコードも同じ結果を返す
      y <- data.frame(x,地方=myreg$地方) 
      aggregate( . ~ 地方, data=y, FUN=mean)
    #+end_src

*** 例: ~data-aggregate.r~
    #+begin_src R :exports both :results output :session mydat
      ## 各地方と人口が中央値以下か否かでグループ分け
      aggregate(x, by=list(地方=myreg$地方,
			   過疎=with(mydat, 人口<=median(人口))),
		FUN=mean)
     #+end_src

** 演習
   :PROPERTIES:
   :reveal_background: #fef4f4
   :END:
   サンプルデータの整理をしてみよう．
   - 県別の人口密度を求めよ
   - 地方別の人口密度を求めよ\\
     (県ごとに人口が異なるので単純に平均してはいけない)
   - 地方別の婚姻率・離婚率を概算せよ\\
     (婚姻年齢は15歳以上として概算してよい)
